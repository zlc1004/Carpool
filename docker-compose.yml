services:
  app:
    image: zodern/meteor
    container_name: app
    ports:
      - "3000:3000"
    environment:
      - ROOT_URL=${ROOT_URL:-http://localhost:3000}
      - MONGO_URL=mongodb://mongo:27017/carpool
      - PORT=3000
      # Push Notification Configuration
      - NOTIFICATION_BACKEND=${NOTIFICATION_BACKEND:-firebase}
      # Firebase Configuration
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      # OneSignal Configuration
      - ONESIGNAL_APP_ID=${ONESIGNAL_APP_ID}
      - ONESIGNAL_API_KEY=${ONESIGNAL_API_KEY}
      # Web Push Configuration
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      # Email Configuration
      - MAIL_URL=${MAIL_URL}
      # Legacy SMTP variables (not used if MAIL_URL is set)
      - SMTP_SERVER=${SMTP_SERVER:-smtp.mail.me.com}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - ./build/app.tar.gz:/bundle/bundle.tar.gz
    depends_on:
      mongo:
        condition: service_healthy
      tileserver-gl:
        condition: service_healthy
      nominatim:
        condition: service_healthy
      osrm:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test: ["CMD", "curl", "--silent", "--show-error", "--output", "/dev/null", "http://127.0.0.1:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 600s

  mongo:
    image: mongo:4.4
    container_name: mongo
    volumes:
      - ./mongo_data:/data/db
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-carpool}
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["manual"]
    networks:
      - carpool_network

  tileserver-gl:
    image: "maptiler/tileserver-gl:latest"
    container_name: tileserver-gl
    command:
      - --port
      - "8082"
      - --config
      - "/style/config.json"
    volumes:
      - ./openmaptilesdata/data:/data
      - ./openmaptilesdata/style:/style
      - ./openmaptilesdata/build:/build
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test:
        ["CMD", "node", "-e", "require('net').connect({host: '127.0.0.1', port: 8082}).on('connect',()=>process.exit(0)).on('error',()=>process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nominatim:
    container_name: nominatim
    image: mediagis/nominatim:5.1
    environment:
      - PBF_PATH=/nominatim/data/north-america/canada/${REGION:-british-columbia}.osm.pbf
    volumes:
      - ./openmaptilesdata/data:/nominatim/data
      - ./pgdataNominatimInternal:/var/lib/postgresql/16/main
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test: ["CMD", "curl", "--silent", "--show-error", "--output", "/dev/null", "http://127.0.0.1:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  osrm:
    container_name: osrm
    image: ghcr.io/project-osrm/osrm-backend
    command: osrm-routed --algorithm mld /data/${REGION:-british-columbia}.osrm --port 8083
    volumes:
      - ./osrmdata/data:/data
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z 127.0.0.1 8083"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  codepush-server:
    image: tablee/code-push-server:v0.5.2
    container_name: codepush-server
    environment:
      - NODE_ENV=production
      - DOWNLOAD_URL=https://codepush.carp.school/download
      - MYSQL_HOST=codepush-mysql
      - MYSQL_PORT=3306
      - MYSQL_USERNAME=codepush
      - MYSQL_PASSWORD=${CODEPUSH_MYSQL_PASSWORD:-codepush123}
      - MYSQL_DATABASE=codepush
      - STORAGE_DIR=/data/storage
      - DATA_DIR=/data/tmp
      - REDIS_HOST=codepush-redis
      - REDIS_PORT=6379
      - JWT_ENCRYPT_KEY=${CODEPUSH_JWT_KEY:-your-secret-key-change-in-production}
      - SESSION_SECRET=${CODEPUSH_SESSION_SECRET:-your-session-secret-change-in-production}
    volumes:
      - ./codepush_storage:/data/storage
      - ./codepush_tmp:/data/tmp
      - ./codepush-config.js:/config.js:ro
    depends_on:
      codepush-mysql:
        condition: service_healthy
      codepush-redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test: ["CMD", "curl", "--silent", "--show-error", "--output", "/dev/null", "http://127.0.0.1:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  codepush-mysql:
    image: mysql:5.7.23
    container_name: codepush-mysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=false
      - MYSQL_ROOT_PASSWORD=${CODEPUSH_MYSQL_ROOT_PASSWORD:-rootpass123}
      - MYSQL_DATABASE=codepush
      - MYSQL_USER=codepush
      - MYSQL_PASSWORD=${CODEPUSH_MYSQL_PASSWORD:-codepush123}
    volumes:
      - ./codepush_mysql_data:/var/lib/mysql
      - ./codepush-init.sql:/docker-entrypoint-initdb.d/codepush-init.sql:ro
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "codepush", "-p${CODEPUSH_MYSQL_PASSWORD:-codepush123}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  codepush-redis:
    image: redis:4.0.11-alpine
    container_name: codepush-redis
    volumes:
      - ./codepush_redis_data:/data
    restart: unless-stopped
    networks:
      - carpool_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  service-proxy:
    image: nginx:alpine
    container_name: service-proxy
    ports:
      - "40060:8080"  # Nominatim
      - "40061:8082"  # Tileserver
      - "40062:8083"  # OSRM
      - "40064:8084"  # CodePush
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      tileserver-gl:
        condition: service_healthy
      nominatim:
        condition: service_healthy
      osrm:
        condition: service_healthy
      codepush-server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - carpool_network
    profiles: ["manual"]

    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z 127.0.0.1 8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Environment Variables:
# ROOT_URL - Application URL for email links and client routing
#           Development: http://localhost:3000 (default)
#           Production: https://carp.school
#           Example: ROOT_URL=https://carp.school docker compose up
#
# REGION - Sets the region name for data files (default: british-columbia)
#          Should match your PBF and OSRM data filenames
#          Example: REGION=alberta docker compose up
#
# MONGO_EXPRESS_USERNAME - Username for mongo-express (default: admin)
# MONGO_EXPRESS_PASSWORD - Password for mongo-express (default: carpool)
#                         CHANGE THIS IN PRODUCTION!
#
# CodePush Configuration:
# CODEPUSH_MYSQL_PASSWORD - MySQL password for CodePush (default: codepush123)
# CODEPUSH_MYSQL_ROOT_PASSWORD - MySQL root password (default: rootpass123)
# CODEPUSH_JWT_KEY - JWT encryption key for CodePush (CHANGE IN PRODUCTION!)
# CODEPUSH_SESSION_SECRET - Session secret for CodePush (CHANGE IN PRODUCTION!)
#                          CHANGE ALL CODEPUSH SECRETS IN PRODUCTION!
#
# Push Notification Configuration:
# NOTIFICATION_BACKEND - Choose 'firebase' or 'onesignal' (default: firebase)
# FIREBASE_PROJECT_ID - Firebase project ID for push notifications
# FIREBASE_CLIENT_EMAIL - Firebase service account email
# FIREBASE_PRIVATE_KEY - Firebase service account private key
# ONESIGNAL_APP_ID - OneSignal application ID
# ONESIGNAL_API_KEY - OneSignal REST API key
# VAPID_PUBLIC_KEY - VAPID public key for web push notifications
# VAPID_PRIVATE_KEY - VAPID private key for web push notifications
#
# Email Configuration:
# MAIL_URL - Complete SMTP URL for email sending
#           Example: smtp://user%40icloud.com:app-password@smtp.mail.me.com:587
#           For iCloud+: smtp://main-email%40icloud.com:app-password@smtp.mail.me.com:587
#           Remember to URL encode @ as %40 in email addresses

networks:
  carpool_network:
    driver: bridge
